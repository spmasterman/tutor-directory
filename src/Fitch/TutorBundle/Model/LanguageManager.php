<?php

namespace Fitch\TutorBundle\Model;

use Fitch\CommonBundle\Model\BaseModelManager;
use Fitch\TutorBundle\Entity\Repository\LanguageRepository;
use Fitch\TutorBundle\Entity\Language;

class LanguageManager extends BaseModelManager implements LanguageManagerInterface
{
    /**
     * @param $languageName
     *
     * @return Language
     */
    public function findOrCreate($languageName)
    {
        $language = $this->getRepo()->findOneBy(['name' => $languageName]);

        if (!$language) {
            $language = $this->createEntity();
            $language
                ->setName($languageName)
                ->setActive(true)
                ->setThreeLetterCode('')
            ;
            $this->saveEntity($language);
        }

        return $language;
    }

    /**
     * @return Language[]
     */
    public function findAllSorted()
    {
        return $this->getRepo()->findBy([], [
            'preferred' => 'DESC',
            'active' => 'DESC',
            'name' => 'ASC',
        ]);
    }

    /**
     * @return Language[]
     */
    public function buildChoices()
    {
        return $this->getRepo()->findBy(['active' => true]);
    }

    /**
     * @return Language[]
     */
    public function buildPreferredChoices()
    {
        return $this->getRepo()->findBy(['active' => true, 'preferred' => true]);
    }

    /**
     * Returns all active languages as a Array - suitable for use in "select"
     * style lists, with a preferred section.
     *
     * @return array
     */
    public function buildGroupedChoices()
    {
        return parent::buildActiveAndPreferredChoices(function (Language $language) {
            return [
                'value' => $language->getId(),
                'text' => $language->getName(),
            ];
        });
    }

    /**
     * Used  to identify logs generated by this class.
     *
     * @return string
     */
    protected function getDebugKey()
    {
        return 'fitch.manager.language';
    }
}
