<?php

namespace Fitch\TutorBundle\Model;

use Doctrine\ORM\EntityManager;
use Fitch\CommonBundle\Model\BaseModelManager;
use Fitch\TutorBundle\Entity\Repository\TutorLanguageRepository;
use Fitch\TutorBundle\Entity\Tutor;
use Fitch\TutorBundle\Entity\TutorLanguage;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;

class TutorLanguageManager extends BaseModelManager implements TutorLanguageManagerInterface
{
    /** @var ProficiencyManager $proficiencyManager  */
    private $proficiencyManager;

    public function __construct(
        EventDispatcherInterface $dispatcher,
        EntityManager $em,
        $class,
        ProficiencyManager $proficiencyManager
    ) {
        parent::__construct($dispatcher, $em, $class);

        $this->proficiencyManager = $proficiencyManager;
    }

    /**
     * Create a new TutorLanguage.
     *
     * Set its default values
     *
     * @return TutorLanguage
     */
    public function createTutorLanguage()
    {
        /** @var TutorLanguage $tutorLanguage */
        $tutorLanguage = parent::createEntity();
        $this->setDefaultProficiency($tutorLanguage);

        return $tutorLanguage;
    }

    /**
     * @param TutorLanguage $tutorLanguage
     */
    public function setDefaultProficiency(TutorLanguage $tutorLanguage)
    {
        $proficiency = $this->proficiencyManager->findDefaultProficiency();
        if ($proficiency) {
            $tutorLanguage->setProficiency($proficiency);
        }
    }

    /**
     * @param int $id
     */
    public function removeTutorLanguage($id)
    {
        $tutorLanguage = $this->findById($id);
        parent::removeEntity($tutorLanguage);
    }

    /**
     * @param TutorLanguage $tutorLanguage
     */
    public function refreshTutorLanguage(TutorLanguage $tutorLanguage)
    {
        parent::reloadEntity($tutorLanguage);
    }

    /**
     * @param $id
     * @param Tutor $tutor
     *
     * @return TutorLanguage
     */
    public function findOrCreateTutorLanguage($id, Tutor $tutor)
    {
        if ($id) {
            $tutorLanguage = $this->findById($id);
        } else {
            $tutorLanguage = $this->createTutorLanguage();
            $tutor->addTutorLanguage($tutorLanguage);
        }

        return $tutorLanguage;
    }

    /**
     * @return TutorLanguageRepository
     */
    private function getRepo()
    {
        return $this->repo;
    }

    /**
     * Used  to identify logs generated by this class.
     *
     * @return string
     */
    protected function getDebugKey()
    {
        return 'fitch.manager.tutor_language';
    }
}
