<?php

namespace Fitch\TutorBundle\Model;

use Fitch\CommonBundle\Exception\EntityNotFoundException;
use Fitch\CommonBundle\Model\BaseModelManager;
use Fitch\TutorBundle\Entity\Repository\CompetencyTypeRepository;
use Fitch\TutorBundle\Entity\CompetencyType;

class CompetencyTypeManager extends BaseModelManager
{
    /**
     * @param $id
     *
     * @throws EntityNotFoundException
     *
     * @return CompetencyType
     */
    public function findById($id)
    {
        return parent::findById($id);
    }

    /**
     * @return CompetencyType[]
     */
    public function findAll()
    {
        return parent::findAll();
    }

    /**
     * @return array
     */
    public function buildChoices()
    {
        return $this->findAll();
    }

    /**
     * Returns all active competencyTypes as a Array - suitable for use in "select"
     * style lists, with a grouped sections.
     *
     * @return array
     */
    public function buildGroupedChoices()
    {
        // FOR NOW - THIS JUST RETURNS K=>V
        // BUT WHEN THE SKILL CATEGORY COMES IN THIS WILL BE USED
        $choices = [];
        foreach ($this->findAll() as $competencyType) {
            $choices[$competencyType->getId()] = $competencyType->getName();
        }

// Something like this but not "preferred" - SkillCategory instead...
//        $choices = [
//            [
//                'text' => 'Preferred',
//                'children' => []
//            ],
//            [
//                'text' => 'Other',
//                'children' => []
//            ]
//        ];
//
//        foreach($this->findAllSorted() as $language) {
//            if ($language->isActive()) {
//                $key = $language->isPreferred() ? 0 : 1;
//                $choices[$key]['children'][] = [
//                    'value' => $language->getId(),
//                    'text' => $language->getName(),
//                ];
//            }
//        }
        return $choices;
    }

    /**
     * @param string          $competencyTypeName
     * @param CategoryManager $categoryManager
     *
     * @return CompetencyType
     */
    public function findOrCreate($competencyTypeName, CategoryManager $categoryManager)
    {
        $competencyType = $this->getRepo()->findOneBy(['name' => $competencyTypeName]);

        if (!$competencyType) {
            $competencyType = $this->createCompetencyType($categoryManager);
            $competencyType->setName($competencyTypeName);
            $this->saveCompetencyType($competencyType);
        }

        return $competencyType;
    }

    /**
     * @param CompetencyType $competencyType
     * @param bool           $withFlush
     */
    public function saveCompetencyType($competencyType, $withFlush = true)
    {
        parent::saveEntity($competencyType, $withFlush);
    }

    /**
     * Create a new CompetencyType.
     *
     * Set its default values
     *
     * @param CategoryManager $categoryManager
     *
     * @return CompetencyType
     */
    public function createCompetencyType(
        CategoryManager $categoryManager
    ) {
        /** @var CompetencyType $competencyType */
        $competencyType = parent::createEntity();
        $this->setDefaultCategory($competencyType, $categoryManager);

        return $competencyType;
    }

    /**
     * @param CompetencyType  $competencyType
     * @param CategoryManager $categoryManager
     */
    public function setDefaultCategory(CompetencyType $competencyType, CategoryManager $categoryManager)
    {
        $category = $categoryManager->findDefaultCategory();
        if ($category) {
            $competencyType->setCategory($category);
        }
    }

    /**
     * @param int $id
     */
    public function removeCompetencyType($id)
    {
        $competencyType = $this->findById($id);
        parent::removeEntity($competencyType);
    }

    /**
     * @param CompetencyType $competencyType
     */
    public function refreshCompetencyType(CompetencyType $competencyType)
    {
        parent::reloadEntity($competencyType);
    }

    /**
     * @return CompetencyTypeRepository
     */
    private function getRepo()
    {
        return $this->repo;
    }

    /**
     * Used  to identify logs generated by this class.
     *
     * @return string
     */
    protected function getDebugKey()
    {
        return 'fitch.manager.competency_type';
    }
}
