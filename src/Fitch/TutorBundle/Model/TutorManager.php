<?php

namespace Fitch\TutorBundle\Model;

use Doctrine\ORM\EntityManager;
use Fitch\CommonBundle\Model\BaseModelManager;
use Fitch\TutorBundle\Entity\Repository\TutorRepository;
use Fitch\TutorBundle\Entity\Tutor;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;

/**
 * Class TutorManager.
 */
class TutorManager extends BaseModelManager implements TutorManagerInterface
{
    /** @var AddressManagerInterface $addressManager  */
    private $addressManager;

    /** @var CountryManagerInterface $countryManager  */
    private $countryManager;

    /** @var StatusManagerInterface $statusManager  */
    private $statusManager;

    /** @var OperatingRegionManagerInterface $operatingRegionManager  */
    private $operatingRegionManager;

    /** @var TutorTypeManagerInterface $tutorTypeManager  */
    private $tutorTypeManager;

    /**
     * @param EventDispatcherInterface        $dispatcher
     * @param EntityManager                   $em
     * @param string                          $class
     * @param AddressManagerInterface         $addressManager
     * @param CountryManagerInterface         $countryManager
     * @param StatusManagerInterface          $statusManager
     * @param OperatingRegionManagerInterface $operatingRegionManager
     * @param TutorTypeManagerInterface       $tutorTypeManager
     */
    public function __construct(
        EventDispatcherInterface $dispatcher,
        EntityManager $em,
        $class,
        AddressManagerInterface $addressManager,
        CountryManagerInterface $countryManager,
        StatusManagerInterface $statusManager,
        OperatingRegionManagerInterface $operatingRegionManager,
        TutorTypeManagerInterface $tutorTypeManager
    ) {
        parent::__construct($dispatcher, $em, $class);

        $this->addressManager = $addressManager;
        $this->countryManager = $countryManager;
        $this->statusManager = $statusManager;
        $this->operatingRegionManager = $operatingRegionManager;
        $this->tutorTypeManager = $tutorTypeManager;
    }

    /**
     * @return array
     */
    public function populateTable()
    {
        return $this->getRepo()->findAllForTable();
    }

    /**
     * @param ReportDefinition $definition
     *
     * @return Tutor[]
     */
    public function getReportData(ReportDefinition $definition)
    {
        return $this->getRepo()->getReportData($definition);
    }

    /**
     * @param Tutor $tutor
     */
    private function createDefaultAddressIfRequired(Tutor $tutor)
    {
        if (!$tutor->hasAddress()) {
            $address = $this->addressManager->createEntity();
            $address->setCountry($this->countryManager->getDefaultCountry());
            $tutor->addAddress($address);
        }
    }

    /**
     * Create a new Tutor.
     *
     * Set its default values
     *
     * @return Tutor
     */
    public function createEntity()
    {
        /** @var Tutor $tutor */
        $tutor = parent::createEntity();
        $this->createDefaultAddressIfRequired($tutor);
        $this->setDefaultRegion($tutor);
        $this->setDefaultStatus($tutor);
        $this->setDefaultTutorType($tutor);

        return $tutor;
    }

    /**
     * @param Tutor $tutor
     */
    private function setDefaultRegion(Tutor $tutor)
    {
        $region = $this->operatingRegionManager->findDefaultEntity();
        if ($region) {
            $tutor->setRegion($region);
            $tutor->setCurrency($region->getDefaultCurrency());
        }
    }

    /**
     * @param Tutor $tutor
     */
    private function setDefaultStatus(Tutor $tutor)
    {
        $tutor->setStatus($this->statusManager->findDefaultEntity());
    }

    /**
     * @param Tutor $tutor
     */
    private function setDefaultTutorType(Tutor $tutor)
    {
        $tutor->setTutorType($this->tutorTypeManager->findDefaultEntity());
    }

    /**
     * @return TutorRepository
     */
    protected function getRepo()
    {
        return $this->repo;
    }

    /**
     * Used  to identify logs generated by this class.
     *
     * @return string
     */
    protected function getDebugKey()
    {
        return 'fitch.manager.tutor';
    }
}
