<?php

namespace Fitch\TutorBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Fitch\TutorBundle\Entity\Tutor;
use Fitch\TutorBundle\Model\ReportDefinition;

/**
 * TutorRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TutorRepository extends EntityRepository
{
    public function findAllForTable()
    {
        $sql = <<<'SQL'

            SELECT
              tutor.name AS fullname,
              tutor_type.name AS ttype,
              concat(region.name, ' (', region.code, ')') AS region,
              status.name AS status,
              GROUP_CONCAT(DISTINCT
                  CONCAT(competency_type.name, '|' ,competency_level.name, '|',IFNULL(competency.note,''))
              SEPARATOR ' ~ ') AS competency_details,
              CONCAT(
                IFNULL(tutor.bio,''),
                IFNULL(GROUP_CONCAT(DISTINCT note.body),''),
                IFNULL(GROUP_CONCAT(DISTINCT filecontent.text_content), '')
              ) AS search_dump,
              tutor.id AS id
            FROM tutor
            JOIN status ON status.id = tutor.status_id
            JOIN region ON region.id = tutor.region_id
            JOIN tutor_type ON tutor_type.id = tutor.tutor_type_id
            LEFT JOIN competency ON competency.tutor_id = tutor.id
            LEFT JOIN competency_level ON competency_level.id = competency.competency_level_id
            LEFT JOIN competency_type ON competency_type.id = competency.competency_type_id
            LEFT JOIN note ON note.tutor_id = tutor.id
            LEFT JOIN (
                 SELECT
                    tutor_id,
                    GROUP_CONCAT(DISTINCT file.text_content) AS text_content
                 FROM file
                 JOIN file_type ON file_type.id = file.file_type_id AND file_type.is_bio
            ) AS filecontent ON filecontent.tutor_id = tutor.id
            GROUP BY tutor.id
SQL;

        $this->getEntityManager()->getConnection()->prepare('SET SESSION group_concat_max_len = 1000000')->execute();
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();

        return $stmt->fetchAll();
    }

    /**
     * @param ReportDefinition $definition
     *
     * @return Tutor[]
     */
    public function getReportData(ReportDefinition $definition)
    {
        $qb = $this
            ->createQueryBuilder('t')
            ->where('1 = 1')
        ;

        $this->handleRegionFilter($definition, $qb);
        $this->handleStatusFilter($definition, $qb);
        $this->handleTutorTypeFilter($definition, $qb);
        $this->handleLanguageFilter($definition, $qb);
        $this->handleRateFilter($definition, $qb);
        $this->handleCompetencyFilter($definition, $qb);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param ReportDefinition $definition
     * @param QueryBuilder     $queryBuilder
     */
    private function handleRegionFilter(ReportDefinition $definition, QueryBuilder $queryBuilder)
    {
        if ($definition->isFilteredBy('Region')) {
            $queryBuilder
                ->leftJoin('t.region', 'r')
                ->andWhere('r.id IN '.$this->getIdsAsSet($definition->getRegionIds()))
            ;
        }
    }

    /**
     * @param ReportDefinition $definition
     * @param QueryBuilder     $queryBuilder
     */
    private function handleStatusFilter(ReportDefinition $definition, QueryBuilder $queryBuilder)
    {
        if ($definition->isFilteredBy('Status')) {
            $queryBuilder
                ->leftJoin('t.status', 's')
                ->andWhere('s.id IN '.$this->getIdsAsSet($definition->getStatusIds()))
            ;
        }
    }

    /**
     * @param ReportDefinition $definition
     * @param QueryBuilder     $queryBuilder
     */
    private function handleTutorTypeFilter(ReportDefinition $definition, QueryBuilder $queryBuilder)
    {
        if ($definition->isFilteredBy('TutorType')) {
            $queryBuilder
                ->leftJoin('t.tutorType', 'tt')
                ->andWhere('tt.id IN '.$this->getIdsAsSet($definition->getTutorTypeIds()))
            ;
        }
    }

    /**
     * @param ReportDefinition $definition
     * @param QueryBuilder     $queryBuilder
     */
    private function handleLanguageFilter(ReportDefinition $definition, QueryBuilder $queryBuilder)
    {
        if ($definition->isFilteredBy('Language')) {
            $queryBuilder
                ->leftJoin('t.tutorLanguages', 'tl')
                ->leftJoin('tl.language', 'l')
                ->andWhere('l.id IN '.$this->getIdsAsSet($definition->getLanguageIds()))
            ;

            if ($definition->getLanguageOperator() == 'and') {
                $queryBuilder
                    ->groupBy('t.id')
                    ->having('COUNT(DISTINCT l.id) = '.count($definition->getLanguageIds()))
                ;
            }
        }
    }

    /**
     * @param ReportDefinition $definition
     * @param QueryBuilder     $queryBuilder
     */
    private function handleRateFilter(ReportDefinition $definition, QueryBuilder $queryBuilder)
    {
        if ($definition->isFilteredBy('Rate')) {
            $queryBuilder
                ->join('t.rates', 'ra')
                ->join('t.currency', 'c')
                ->andWhere('ra.amount '.$definition->getRateLimitAsExpression('c'))
            ;
            if ($definition->isFilteredBy('RateType')) {
                $queryBuilder->andWhere('LOWER(ra.name) IN '.$definition->getRateTypesAsSet());
            }
        }
    }

    /**
     * @param ReportDefinition $definition
     * @param QueryBuilder     $queryBuilder
     */
    private function handleCompetencyFilter(ReportDefinition $definition, QueryBuilder $queryBuilder)
    {
        if ($definition->isFilteredBy('Competency')) {
            $queryBuilder
                ->join('t.competencies', 'tc')
                ->join('tc.competencyType', 'tct')
                ->join('tct.category', 'cat')
            ;

            if ($definition->isFilteredBy('Category')) {
                $this->handleCategoryFilter($definition, $queryBuilder);
            } elseif ($definition->isFilteredBy('CompetencyType')) {
                $this->handleCompetencyTypeFilter($definition, $queryBuilder);
            }

            if ($definition->isFilteredBy('CompetencyLevel')) {
                $queryBuilder
                    ->join('tc.competencyLevel', 'tcl')
                    ->andWhere('tcl.id IN '.$this->getIdsAsSet($definition->getCompetencyLevelIds()))
                ;
            }
        }
    }

    /**
     * @param array $idArray
     *
     * @return string
     */
    private function getIdsAsSet($idArray)
    {
        $this->sanitizeIdArray($idArray);

        return '('.implode(',', $idArray).')';
    }

    /**
     * @param $arrayIn
     */
    private function sanitizeIdArray($arrayIn)
    {
        array_walk($arrayIn, function (&$value) {
            $value = (int) trim($value);
        });
    }

    /**
     * @param ReportDefinition $definition
     * @param QueryBuilder $queryBuilder
     */
    private function handleCategoryFilter(ReportDefinition $definition, QueryBuilder $queryBuilder)
    {
        $queryBuilder
            ->andWhere('cat.id IN ' . $this->getIdsAsSet($definition->getCategoryIds()));
        if ($definition->getCategoryOperator() == 'and') {
            $queryBuilder
                ->groupBy('t.id')
                ->having('COUNT(DISTINCT cat.id) = ' . count($definition->getCategoryIds()));
        }
    }

    /**
     * @param ReportDefinition $definition
     * @param QueryBuilder $queryBuilder
     */
    private function handleCompetencyTypeFilter(ReportDefinition $definition, QueryBuilder $queryBuilder)
    {
        $queryBuilder
            ->andWhere('tct.id IN ' . $this->getIdsAsSet($definition->getCompetencyTypeIds()));
        if ($definition->getCompetencyTypeOperator() == 'and') {
            $queryBuilder
                ->groupBy('t.id')
                ->having('COUNT(DISTINCT tct.id) = ' . count($definition->getCompetencyTypeIds()));
        }
    }
}
